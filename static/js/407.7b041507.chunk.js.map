{"version":3,"file":"static/js/407.7b041507.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Section/Section.module.jsx","components/Section/Section.js","components/ContactForm/ContactForm.module.jsx","components/ContactForm/ContactForm.js","components/Filter/Filter.module.jsx","components/Filter/Filter.js","webpack://goit-react-hw-08-phonebook/./src/components/EditContactForm/EditContactForm.module.css?43d2","components/EditContactForm/EditContactForm.js","components/ModalEditContact/ModalEditContact.module..jsx","components/ModalEditContact/ModalEditContact.js","components/ContactListItem/ContactListItem.module.jsx","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.module.jsx","components/ContactList/ContactList.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContactsList = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContactsFilter = state => state.filters;\n\nexport const selectVisibleContacts = createSelector(\n    [ selectContactsList, selectContactsFilter],\n    (contacts, filter) => {\n    return contacts.filter(contact => contact.name.toLowerCase()\n    .includes(filter.toLowerCase()))\n    }\n    )","import styled from '@emotion/styled';\n\nexport const SectionContainer = styled.section`\n  margin: auto;\n  margin-bottom: 15px;\n  padding: 20px;\n  display: grid;\n  justify-content: center;\n  justify-items: center;\n  gap: 14px;\n  background: rgba(138, 43, 226, 0.8);\n  max-width: 500px;\n  border-radius: 2%;\n`;\n\nexport const Title = styled.h2`\n  margin: 0;\n`;","import PropTypes from 'prop-types';\n\nimport { SectionContainer, Title } from './Section.module';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionContainer>\n      <Title>{title}</Title>\n      {children}\n    </SectionContainer>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n}","import styled from '@emotion/styled';\n\nexport const Form = styled.form``;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-top: 0.25em;\n`;\n\nexport const Input = styled.input`\n  width: 250px;\n  padding: 5px;\n  border-radius: 5px;\n`;\nexport const Button = styled.button`\n  border-radius: 5px;\n  margin-top: 0.5em;\n  padding: 0.25em 1em;\n  cursor: pointer;\n`;","import { useSelector, useDispatch } from 'react-redux';\n\nimport { selectContactsList } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\n\nimport { Form, Input, Label, Button } from './ContactForm.module';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsList);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const form = e.target;\n    const formName = e.target.elements.name.value;\n    const formNumber = e.target.elements.number.value;\n\n    if (contacts.some(({ name }) => name.toLowerCase() === formName.toLowerCase())) {\n      return alert(`${formName} is already in contacts`);\n    }\n\n    if (contacts.some(({ number }) => number === formNumber)) {\n      return alert(`${formNumber} is already in contacts`);\n    }\n\n    dispatch(addContact({ name: formName, number: formNumber }));\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit} autoComplete=\"off\">\n      <Label>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          placeholder=\"Enter name\"\n          value={contacts.name}\n        />\n      </Label>\n      <Label>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          placeholder=\"Enter number\"\n          value={contacts.number}\n        />\n      </Label>\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 16px;\n  font-weight: 500;\n`;\nexport const Input = styled.input`\n  width: 250px;\n  padding: 5px;\n  border-radius: 5px;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { setContactsFilter } from '../../redux/contacts/filtersSlice';\nimport { selectContactsFilter } from '../../redux/contacts/selectors';\nimport { Label, Input } from './Filter.module';\n\nexport const Filter = () => {\n  const userQueryFilter = useSelector(selectContactsFilter);\n  \n  const dispatch = useDispatch();\n  const handleFilterChange = e => {\n    const userQuery = e.target.value;\n    const normalizedValue = userQuery.toLowerCase().trim();\n    dispatch(setContactsFilter(normalizedValue));\n  };\n  return (\n    <div >\n      <Label>Find contacts by name</Label>\n      <Input\n        type=\"text\"\n        value={userQueryFilter}\n        onChange={handleFilterChange}\n      />\n    </div>\n  );\n};","// extracted by mini-css-extract-plugin\nexport default {\"formstyle\":\"EditContactForm_formstyle__9XZ9v\",\"inputstyle\":\"EditContactForm_inputstyle__DH66l\",\"inputname\":\"EditContactForm_inputname__kuY0g\",\"button\":\"EditContactForm_button__6oq3H\"};","import { useDispatch, useSelector } from 'react-redux';\nimport {editContact } from '../../redux/contacts/operations';\nimport { selectEditContactData, setEditContactData, setModalStatus } from '../../redux/contacts/modalSlice';\nimport {selectContactsList} from '../../redux/contacts/selectors'\nimport css from './EditContactForm.module.css';\nexport const EditContactForm = () => {\n  const contacts = useSelector(selectContactsList);\n \n  const {name, number, id} = useSelector(selectEditContactData);\n\n  const filteredContactsByName = contacts.filter(contact => contact.name !== name);\n  const filteredContactsByNumber = contacts.filter(contact => contact.number !== number);\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const newName = form.elements.name.value;\n    const newNumber = form.elements.number.value;\n\n    if (\n      filteredContactsByName.some(\n        contact => contact.name.toLocaleLowerCase() === newName.toLocaleLowerCase()\n      )\n    ) {\n      alert(`${newName} is already in contacts`);\n    } else if (\n      filteredContactsByNumber.some(contact => contact.number === newNumber)\n    ) {\n        alert(`${newNumber} is already used`);\n      }    \n    else {\n      dispatch(editContact({ id: id, newContactData: {\n        name: newName,\n        number: newNumber,\n      } }));\n      dispatch(setModalStatus(false));\n      dispatch(setEditContactData(null));\n      \n    }\n    form.reset();\n  };\n\n  return (\n    <form className={css.formstyle} onSubmit={handleSubmit} >\n      <label className={css.inputname}  htmlFor={id} >\n        New Name\n      </label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        defaultValue={name}\n        className={css.inputstyle}\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        id={id}\n        required\n      />\n\n      <label className={css.inputname} htmlFor={id} >\n       New Number\n      </label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        defaultValue={number}\n        className={css.inputstyle}\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        id={id}\n        required\n      />\n\n      <button className={css.button} type=\"submit\" >\n        Edit contact\n      </button>\n    </form>\n  );\n};\n\nexport default EditContactForm;","import styled from '@emotion/styled';\n\nexport const Backdrop = styled.div`\nposition: fixed;\nleft: 0;\nright: 0;\ntop: 0;\nbottom: 0;\nbackground-color: rgba(0, 0, 0, 0.4);\ntransition: opacity 300ms linear, visibility 300ms linear;\nz-index: 1;\n`;\n\nexport const Modal = styled.div`\nposition: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%) scaleY(1);\n\n    height: 420px;\n    width: 380px;\n    background: #FFC0CB;\n    box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.14), 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 2px 1px rgba(0, 0, 0, 0.2);\n    border-radius: 4px;\n    transition: transform 300ms linear;\n    padding: 24px;\n`;\n\nexport const Text = styled.p`\ncolor: rgb(0, 0, 0);\nfont-size: larger;\nfont-weight: 700;\npadding-bottom: 15px;\npadding-top: 25px;\ntext-align: center;\n`;\nexport const CloseButton = styled.button`\nposition: absolute;\n    top: 24px;\n    right: 24px;\n    cursor: pointer;\n`;\n ","import EditContactForm from 'components/EditContactForm/EditContactForm';\nimport { Backdrop, Modal, Text, CloseButton } from './ModalEditContact.module.';\nimport { useDispatch } from 'react-redux';\nimport { setEditContactData, setModalStatus } from '../../redux/contacts/modalSlice';\nimport { useEffect } from 'react';\n\nexport const ModalEditContact = () => {\n  const dispatch = useDispatch();\n \n  const onCloseBtnClick = () => {\n    dispatch(setModalStatus(false));\n    dispatch(setEditContactData(null));\n   \n  }\n\n    const handleOverlayClick = event => {\n        if (event.currentTarget === event.target) {\n            dispatch(setModalStatus(false));\n            dispatch(setEditContactData(null));\n          \n        }\n      };\n    \n      useEffect(() => {\n        const handleKeyDown = event => {\n          if (event.code === 'Escape') {\n            dispatch(setModalStatus(false));\n            dispatch(setEditContactData(null));\n            \n          }\n        };\n    \n        window.addEventListener('keydown', handleKeyDown);\n        return () => {\n          window.removeEventListener('keydown', handleKeyDown);\n        };\n      });\n    \n    return <Backdrop  onClick={handleOverlayClick}>\n        <Modal >\n            <Text>You are trying to change the next contact:</Text>\n            <CloseButton onClick={onCloseBtnClick}>&times;</CloseButton>\n            <EditContactForm />\n        </Modal>\n    </Backdrop>\n}\n\nexport default ModalEditContact;","import styled from '@emotion/styled';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border: 1px solid black;\n  padding: 7px;\n`;\n\nexport const ContactName = styled.p`\n  margin: 0;\n  font-weight: 500;\n  text-align: start;\n`;\n\nexport const ContactNumber = styled.span`\n  margin-left: 10px;\n  text-align: end;\n`;\n\nexport const Button = styled.button`\n  margin: 5px;\n  padding: 4px 14px;\n  border-radius: 5px;\n  cursor: pointer;\n`;\nexport const FlexWrap = styled.div`\n display: flex;\nflex-wrap: wrap;\n align-items: center;\n   justify-content: center;\n //justify-content: space-between;\n// gap: 5px;\n`;","import PropTypes from 'prop-types';\nimport { ModalEditContact } from '../ModalEditContact/ModalEditContact'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setEditContactData, setModalStatus, selectModalStatus } from '../../redux/contacts/modalSlice'\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { useEffect } from 'react';\nimport {\n  ContactItem,\n  ContactName,\n  ContactNumber,\n  Button,\n  FlexWrap\n} from './ContactListItem.module';\n\nexport const ContactsListItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  const isModalOpen = useSelector(selectModalStatus);\n  const body = document.body;\n  if(isModalOpen) {\n    body.classList.add('disable-scroll')\n  }else{\n    body.classList.remove('disable-scroll')\n  }\n  const onEditBtnClick = () => {\n    dispatch(setModalStatus(true));\n    dispatch(setEditContactData({ name, number, id }));\n   \n  }\n\n  useEffect(()=>{\n\n  }, [])\n  const handleDeleteContact = userId => {\n    dispatch(deleteContact(userId));\n  };\n\n  return (\n    <div>\n    {isModalOpen && <ModalEditContact />}\n    <ContactItem key={id}>\n    <FlexWrap>\n    \n      <ContactName>\n        {name}:\n      </ContactName>\n      \n      <ContactNumber>{number}</ContactNumber>\n      \n      </FlexWrap>\n      <FlexWrap>\n        <Button onClick={() => handleDeleteContact(id)}>Delete</Button>\n      <Button\n          type=\"button\"\n          onClick={onEditBtnClick}\n        >\n          Edit\n        </Button>\n        </FlexWrap>\n    </ContactItem>\n    </div>\n  );\n};\n\n ContactsListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n   name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n };","import styled from '@emotion/styled';\n\nexport const ContactsList = styled.ul`\n  padding: 0;\n  margin: 0;\n`;","import { useSelector } from 'react-redux';\n\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\n\nimport { ContactsListItem } from '../ContactListItem/ContactListItem';\n\nimport { ContactsList } from './ContactList.module';\n\nexport const ContactList = () => {\n\n  const visibleContacts = useSelector(selectVisibleContacts);\n\nconst sortedContacts =  visibleContacts.sort((a, b) => a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1);\n  \n  return (\n    <ContactsList>\n      {sortedContacts.map(({ name, number, id}) => (\n        <ContactsListItem  key={id} id={id} name={name} number={number} />\n      ))}\n    </ContactsList>\n  );\n};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectError, selectIsLoading } from '../redux/contacts/selectors';\n\nimport { Section } from '../components/Section/Section';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\n import { Filter } from '../components/Filter/Filter';\nimport { ContactList } from '../components/ContactList/ContactList';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n\n      <Section title=\"Contacts\">\n        <Filter />\n        {isLoading && !error && <b>Request in progress</b>}\n        <ContactList />\n      </Section>\n    </>\n  );\n};"],"names":["selectContactsList","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectContactsFilter","filters","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","SectionContainer","styled","_templateObject","_taggedTemplateLiteral","Title","_templateObject2","Section","_ref","title","children","_jsxs","_jsx","Form","Label","Input","_templateObject3","Button","_templateObject4","ContactForm","dispatch","useDispatch","useSelector","onSubmit","e","preventDefault","form","target","formName","elements","value","formNumber","number","some","alert","concat","_ref2","addContact","reset","autoComplete","type","pattern","required","placeholder","Filter","userQueryFilter","onChange","normalizedValue","trim","setContactsFilter","_useSelector","selectEditContactData","id","filteredContactsByName","filteredContactsByNumber","className","css","currentTarget","newName","newNumber","toLocaleLowerCase","editContact","newContactData","setModalStatus","setEditContactData","htmlFor","defaultValue","Backdrop","Modal","Text","CloseButton","ModalEditContact","useEffect","handleKeyDown","event","code","window","addEventListener","removeEventListener","onClick","EditContactForm","ContactItem","ContactName","ContactNumber","FlexWrap","_templateObject5","ContactsListItem","isModalOpen","selectModalStatus","body","document","classList","add","remove","userId","deleteContact","ContactsList","ContactList","sortedContacts","sort","a","b","map","ContactsPage","fetchContacts","_Fragment"],"sourceRoot":""}
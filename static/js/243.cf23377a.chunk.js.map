{"version":3,"file":"static/js/243.cf23377a.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/Section/Section.module.jsx","components/Section/Section.js","components/ContactForm/ContactForm.module.jsx","components/ContactForm/ContactForm.js","components/Filter/Filter.module.jsx","components/Filter/Filter.js","components/ContactListItem/ContactListItem.module.jsx","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.module.jsx","components/ContactList/ContactList.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContactsList = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContactsFilter = state => state.filters;\n\nexport const selectVisibleContacts = createSelector(\n    [ selectContactsList, selectContactsFilter],\n    (contacts, filter) => {\n    return contacts.filter(contact => contact.name.toLowerCase()\n    .includes(filter.toLowerCase()))\n    }\n    )","import styled from '@emotion/styled';\n\nexport const SectionContainer = styled.section`\n  margin: auto;\n  padding: 20px;\n  display: grid;\n  justify-content: center;\n  justify-items: center;\n  gap: 14px;\n`;\n\nexport const Title = styled.h2`\n  margin: 0;\n`;","import PropTypes from 'prop-types';\n\nimport { SectionContainer, Title } from './Section.module';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionContainer>\n      <Title>{title}</Title>\n      {children}\n    </SectionContainer>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n}","import styled from '@emotion/styled';\n\nexport const Form = styled.form``;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-top: 0.25em;\n`;\n\nexport const Input = styled.input`\n  width: 250px;\n  padding: 5px;\n  border-radius: 5px;\n`;\nexport const Button = styled.button`\n  border-radius: 5px;\n  margin-top: 0.5em;\n  padding: 0.25em 1em;\n  cursor: pointer;\n`;","import { useSelector, useDispatch } from 'react-redux';\n\nimport { selectContactsList } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\n\nimport { Form, Input, Label, Button } from './ContactForm.module';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsList);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const form = e.target;\n    const formName = e.target.elements.name.value;\n    const formNumber = e.target.elements.number.value;\n\n    if (contacts.some(({ name }) => name.toLowerCase() === formName.toLowerCase())) {\n      return alert(`${formName} is already in contacts`);\n    }\n\n    if (contacts.some(({ number }) => number === formNumber)) {\n      return alert(`${formNumber} is already in contacts`);\n    }\n\n    dispatch(addContact({ name: formName, number: formNumber }));\n    form.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit} autoComplete=\"off\">\n      <Label>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          placeholder=\"Enter name\"\n          value={contacts.name}\n        />\n      </Label>\n      <Label>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          placeholder=\"Enter number\"\n          value={contacts.number}\n        />\n      </Label>\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 16px;\n  font-weight: 500;\n`;\nexport const Input = styled.input`\n  width: 250px;\n  padding: 5px;\n  border-radius: 5px;\n`;","import { useDispatch, useSelector } from 'react-redux';\n\nimport { setContactsFilter } from '../../redux/contacts/filtersSlice';\nimport { selectContactsFilter } from '../../redux/contacts/selectors';\n\n import { Label, Input } from './Filter.module';\n\n// export const Filter = () => {\n//   const dispatch = useDispatch();\n//   const filter = useSelector(selectContactsFilter);\n\n//   const handleChangeFilter = ({ currentTarget: { value } }) => {\n//     const normalizedValue = value.toLowerCase().trim();\n//     dispatch(setContactsFilter(normalizedValue));\n//   };\n\n//   return (\n//     <Label>\n//       Find contacts by name\n//       <Input\n//         type=\"text\"\n//         name=\"filter\"\n//         placeholder=\"Enter contact name\"\n//         value={filter}\n//         onChange={handleChangeFilter}\n//       />\n//     </Label>\n//   );\n// };\n\nimport { nanoid } from 'nanoid';\n\nexport const Filter = () => {\n  const userQueryFilter = useSelector(selectContactsFilter);\n  \n  const dispatch = useDispatch();\n\n  const searchInputId = nanoid();\n\n  const handleFilterChange = e => {\n    const userQuery = e.target.value;\n    const normalizedValue = userQuery.toLowerCase().trim();\n    dispatch(setContactsFilter(normalizedValue));\n  };\n\n  return (\n    <div >\n      <Label htmlFor={searchInputId}>Find contacts by name</Label>\n      <Input\n        type=\"text\"\n        id={searchInputId}\n        value={userQueryFilter}\n        onChange={handleFilterChange}\n      />\n    </div>\n  );\n};","import styled from '@emotion/styled';\n\nexport const ContactItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const ContactName = styled.p`\n  margin: 0;\n  font-weight: 500;\n`;\n\nexport const ContactNumber = styled.span`\n  margin-left: 10px;\n`;\n\nexport const Button = styled.button`\n  margin: 8px;\n  padding: 4px 14px;\n  border-radius: 5px;\n  cursor: pointer;\n`;","import PropTypes from 'prop-types';\n\nimport { useDispatch } from 'react-redux';\n\nimport { deleteContact } from '../../redux/contacts/operations';\n\nimport {\n  ContactItem,\n  ContactName,\n  ContactNumber,\n  Button,\n} from './ContactListItem.module';\n\nexport const ContactsListItem = ( contact ) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = userId => {\n    dispatch(deleteContact(userId));\n  };\n\n  return (\n    <ContactItem key={contact.id}>\n      <ContactName>\n        {contact.name}:<ContactNumber>{contact.number}</ContactNumber>\n      </ContactName>\n      <Button onClick={() => handleDeleteContact(contact.id)}>Delete</Button>\n    </ContactItem>\n  );\n};\n\n ContactsListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n   name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n };","import styled from '@emotion/styled';\n\nexport const ContactsList = styled.ul`\n  padding: 0;\n  margin: 0;\n`;","import { useSelector } from 'react-redux';\n\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\n\nimport { ContactsListItem } from '../ContactListItem/ContactListItem';\n\nimport { ContactsList } from './ContactList.module';\n\nexport const ContactList = () => {\n\n  const visibleContacts = useSelector(selectVisibleContacts);\n//   const sortedContacts = visibleContacts.slice().sort((a, b) => {\n//     return b.isFavourite - a.isFavourite;\n//   });\nconst sortedContacts =  visibleContacts.sort((a, b) => a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1);\n  \n  return (\n    <ContactsList>\n      {sortedContacts.map(({ name, number, id}) => (\n        <ContactsListItem  key={id} id={id} name={name} number={number} />\n      ))}\n    </ContactsList>\n  );\n};","// import { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { Helmet } from 'react-helmet';\n// import { ContactList } from 'components/ContactList/ContactList';\n// import { ContactEditor } from 'components/ContactEditor/ContactEditor';\n// import { fetchContacts } from 'redux/contacts/operations';\n// import { selectLoading } from 'redux/contacts/selectors';\n\n// export default function Contacts() {\n//   const dispatch = useDispatch();\n//   const isLoading = useSelector(selectLoading);\n\n//   useEffect(() => {\n//     dispatch(fetchContacts());\n//   }, [dispatch]);\n\n//   return (\n//     <>\n//       <Helmet>\n//         <title>Your contacts</title>\n//       </Helmet>\n//       <ContactEditor />\n//       <div>{isLoading && 'Request in progress...'}</div>\n//       <ContactList />\n//     </>\n//   );\n// }\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectError, selectIsLoading } from '../redux/contacts/selectors';\n\nimport { Section } from '../components/Section/Section';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\n import { Filter } from '../components/Filter/Filter';\nimport { ContactList } from '../components/ContactList/ContactList';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n\n      <Section title=\"Contacts\">\n        <Filter />\n        {isLoading && !error && <b>Request in progress</b>}\n        <ContactList />\n      </Section>\n    </>\n  );\n};"],"names":["selectContactsList","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectContactsFilter","filters","selectVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","SectionContainer","styled","_templateObject","_taggedTemplateLiteral","Title","_templateObject2","Section","_ref","title","children","_jsxs","_jsx","Form","Label","Input","_templateObject3","Button","_templateObject4","ContactForm","dispatch","useDispatch","useSelector","onSubmit","e","preventDefault","form","target","formName","elements","value","formNumber","number","some","alert","concat","_ref2","addContact","reset","autoComplete","type","pattern","required","placeholder","Filter","userQueryFilter","searchInputId","nanoid","htmlFor","id","onChange","normalizedValue","trim","setContactsFilter","ContactItem","ContactName","ContactNumber","ContactsListItem","onClick","userId","deleteContact","ContactsList","ContactList","sortedContacts","sort","a","b","map","ContactsPage","useEffect","fetchContacts","_Fragment"],"sourceRoot":""}